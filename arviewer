#!/usr/bin/env python

VERSION = "0.5"

import pyglet

# Disable error checking for increased performance
pyglet.options['debug_gl'] = False


from pyglet import clock
from pyglet.gl import *
from pyglet.window import key
from pyglet.window import mouse
#from math import tan, radians, sqrt
import ConfigParser

from gcodeParser import *
import os.path
import time

class App:
	def __init__(self):
		self.RX = 0.0
		self.RZ = 0.0
		self.zoom = 1.0
		self.config = ConfigParser.ConfigParser()
		self.config.read('config.cfg')
		self.lowerOpacity = self.config.getint('Display','lower_layer_opacity') or int(50)
		self.lowerLineWidth = self.config.getint('Display','lower_layer_line_width') or int(1)
		
		self.activeOpacity = self.config.getint('Display','active_layer_opacity') or int(255)
		self.activeLineWidth = self.config.getint('Display','active_layer_line_width') or int(1)
		
		self.limboOpacity = self.config.getint('Display','limbo_layer_opacity') or int(255)
		self.limboLineWidth = self.config.getint('Display','limbo_layer_line_width') or int(1)
		
		self.segmentLineWidth = self.config.getint('Display','active_segment_line_width') or int(5)
	
	def main(self):
		
		#### MAIN CODE ####
		print "Arcus-3D - arviewer v%s"%VERSION

		import sys
		if len(sys.argv) > 1:
			path = sys.argv[1]
		else:
			# get the real path to the script
			script_path = os.path.realpath(__file__)
			# get the containing folder
			script_dir = os.path.dirname(script_path)
			path = os.path.join(script_dir, self.config.get('Startup','load_file','data/example.gcode'))
		self.load(path)
		self.window = MyWindow(self, caption="Arcus-3D - arviewer: %s"%self.filename, resizable=True)
		self.aspect = float(self.window.width) / self.window.height
		# debug: log all events
		# self.window.push_handlers(pyglet.window.event.WindowEventLogger())
		
		#pyglet.clock.schedule_interval(self.updateMessages,1)
		pyglet.app.run()
	def addMessage(self,message_text,timeout=4.0):
		if hasattr(self,"window") and hasattr(self.window,"messageLabels"):
			message = pyglet.text.Label(message_text,
										multiline=True,
										width=320,
										font_size=12,
										anchor_x='center',
										anchor_y='center'
			)
			self.window.messageLabels.append(message)
			self.window.dispatch_event('on_draw')
			self.window.flip()
		else:
			print message_text

	#def updateMessages(self, elapsed):
		#for message in self.window.messageLabels[:]:
			#if hasattr(message,"expires") and message.expires >= time.time():
				#self.window.messageLabels.remove(message)

	def clearMessages(self,delay=None):
		if delay:
			pyglet.clock.schedule_once(self.do_clearMessages,delay)
		else:
			self.window.messageLabels = []
			self.window.dispatch_event('on_draw')
			self.window.flip()
	def do_clearMessages(self, elapsed):
		self.window.messageLabels = []

	def reload(self):
		self.load(self.path)
			
	def load(self, path):
		
		t1 = time.time()
		
		#print
		#print "Parsing '%s'..."%path
		#print
		
		self.path = path
		self.filename = os.path.basename(self.path)
		self.addMessage("parsing file %s ..."%repr(self.filename))

		parser = GcodeParser(self.config)
		self.model = parser.parseFile(path)

		t2 = time.time()
		self.addMessage("parsed file in %0.3f ms" % ((t2-t1)*1000.0, ))
		#print
		#print "Done! %s"%self.model
		#print
		
		# render the model
		self.addMessage("generating graphics...")
		#print "rendering vertices..."
		self.renderVertices()
		#print "rendering indexed colors..."
		self.renderIndexedColors()
		#print "rendering true colors..."
		self.renderColors()
		self.generateGraphics()
		self.layerIdx = 1
		self.lineSegmentIdx = 0
		self.lineSegmentPreviousIdx = 0
		self.lineIdx = self.model.layers[self.layerIdx].segments[self.lineSegmentIdx].lineNb
		self.lineIdxMax = self.model.layers[self.layerIdx].segments[-1].lineNb
		self.lineIdxMin = self.model.layers[self.layerIdx].segments[0].lineNb
		t3 = time.time()
		self.addMessage("generated graphics in %0.3f ms" % ((t3-t2)*1000.0, ))
		self.clearMessages(2)

	def renderVertices(self):
		t1 = time.time()
		
		self.vertices = []
		
		for layer in self.model.layers:
			
			layer_vertices = []
			
			x = layer.start["X"]
			y = layer.start["Y"]
			z = layer.start["Z"]
			for seg in layer.segments:
				layer_vertices.append(x)
				layer_vertices.append(y)
				layer_vertices.append(z)
				x = seg.coords["X"]
				y = seg.coords["Y"]
				z = seg.coords["Z"]
				layer_vertices.append(x)
				layer_vertices.append(y)
				layer_vertices.append(z)
				
			self.vertices.append(layer_vertices)
			
		t2 = time.time()
		#print "end renderColors in %0.3f ms" % ((t2-t1)*1000.0, )
	
	def renderIndexedColors(self):
		t1 = time.time()
		# all the styles for all layers
		self.vertex_indexed_colors = []
		# for all layers
		rapid_color = [int(n) for n in self.config.get('Display','rapid_color','255,255,128').split(",")]
		for layer in self.model.layers:
			# index for this layer
			layer_vertex_indexed_colors = []
			for seg in layer.segments:
				colorPrevious = None
				if seg.style == "extrude":
					colorCurrent = seg.color
					# naive implementation of color change over line length, not accounting for line length at all.
					if not colorPrevious:
						colorPrevious = colorCurrent
					colorStart = colorPrevious
					colorEnd = colorCurrent
					colorPrevious = colorCurrent
				else:
					colorStart = rapid_color
					colorEnd = rapid_color
				# append color twice (once per end)
				layer_vertex_indexed_colors.extend((colorStart, colorEnd))
			
			# append layer to all layers
			self.vertex_indexed_colors.append(layer_vertex_indexed_colors)
		t2 = time.time()
		#print "end renderIndexedColors in %0.3f ms" % ((t2-t1)*1000.0, )
	
	def renderColors(self):
		t1 = time.time()
		
		self.vertex_colors = [[],[],[]]
		# for all 3 layer types, with 3 different opacities.
		for i,opacity in enumerate([self.lowerOpacity,self.activeOpacity,self.limboOpacity]):
			for indexes in self.vertex_indexed_colors:
				# render color indexes to colors
				colors = []
				for index in indexes:
					colors.extend(index)
					colors.extend([opacity])
				self.vertex_colors[i].append(colors)
		t2 = time.time()
		#print "end renderColors in %0.3f ms" % ((t2-t1)*1000.0, )
	
	def generateGraphics(self):
		t1 = time.time()
		
		self.graphics_old = []
		self.graphics_current = []
		self.graphics_limbo = []
		
		for layer_idx in xrange(len(self.vertices)):
			nb_layer_vertices = len(self.vertices[layer_idx])/3
			vertex_list = pyglet.graphics.vertex_list(nb_layer_vertices,
				('v3f/static', self.vertices[layer_idx]),
				('c4B/static', self.vertex_colors[0][layer_idx])
			)
			self.graphics_old.append(vertex_list)
			
			vertex_list = pyglet.graphics.vertex_list(nb_layer_vertices,
				('v3f/static', self.vertices[layer_idx]),
				('c4B/static', self.vertex_colors[1][layer_idx])
			)
			self.graphics_current.append(vertex_list)
			
			vertex_list = pyglet.graphics.vertex_list(nb_layer_vertices,
				('v3f/static', self.vertices[layer_idx]),
				('c4B/static', self.vertex_colors[2][layer_idx])
			)
			self.graphics_limbo.append(vertex_list)
		#	print nb_layer_vertices, len(self.vertices[layer_idx]), len(self.colors[0][layer_idx])
		
		t2 = time.time()
		#print "end generateGraphics in %0.3f ms" % ((t2-t1)*1000.0, )
		
	def rotate_drag_start(self, x, y, button, modifiers):
		self.rotateDragStartRX = self.RX
		self.rotateDragStartRZ = self.RZ
		self.rotateDragStartX = x
		self.rotateDragStartY = y

	def rotate_drag_do(self, x, y, dx, dy, buttons, modifiers):
		# deltas
		deltaX = x - self.rotateDragStartX
		deltaY = y - self.rotateDragStartY
		# rotate!
		self.RZ = self.rotateDragStartRZ + deltaX/5.0 # mouse X bound to model Z
		self.RX = self.rotateDragStartRX + deltaY/5.0 # mouse Y bound to model X

	def rotate_drag_end(self, x, y, button, modifiers):
		self.rotateDragStartRX = None
		self.rotateDragStartRZ = None
		self.rotateDragStartX = None
		self.rotateDragStartY = None

	def layer_drag_start(self, x, y, button, modifiers):
		self.layerDragStartLayer = self.layerIdx
		self.layerDragStartSegment = self.lineSegmentIdx
		self.layerDragStartX = x
		self.layerDragStartY = y

	def line_drag_start(self, x, y, button, modifiers):

		self.layerDragStartLayer = self.layerIdx
		self.layerDragStartSegment = self.lineSegmentIdx
		self.layerDragStartX = x
		self.layerDragStartY = y

	def layer_drag_do(self, x, y, dx, dy, buttons, modifiers):
		delta = y - self.layerDragStartY + x - self.layerDragStartX
		oldLayerIdx = self.layerIdx
		self.layerIdx = int(self.layerDragStartLayer + delta/15)
		if oldLayerIdx != self.layerIdx:
			self.lineSegmentIdx = 0	
			self.updateLayers()
		
	def line_drag_do(self, x, y, dx, dy, buttons, modifiers):
		delta = y - self.layerDragStartY + x - self.layerDragStartX
		self.lineSegmentIdx = int(self.layerDragStartSegment + delta)
		self.updateLayers()

	def updateLayers(self):
		self.layerIdx = max(min(self.layerIdx, self.model.topLayer), 1)
		self.lineSegmentIdx = max(min(self.lineSegmentIdx, len(self.model.layers[self.layerIdx].segments) - 1),0)
		self.lineIdx = self.model.layers[self.layerIdx].segments[self.lineSegmentIdx].lineNb
		self.lineIdxMin = self.model.layers[self.layerIdx].segments[0].lineNb
		self.lineIdxMax = self.model.layers[self.layerIdx].segments[-1].lineNb
		if self.window.layerLabel:
			self.window.layerLabel.text = "Layer %d of %d - Lines %d to %d"%(self.layerIdx,self.model.topLayer, self.lineIdxMin,self.lineIdxMax)
		if self.window.lineLabel:
			self.window.lineLabel.text = "Line %d"%self.lineIdx
	#	# clamp layer to 0-max, with origin slip
	#	if (self.layerIdx < 0):
	#		self.layerIdx = 0
	#		self.layerDragStartLayer = 0
	#		self.layerDragStartX = x
	#		self.layerDragStartY = y
	#	if (self.layerIdx > len(self.model.layers)-1):
	#		self.layerIdx = len(self.model.layers)-1
	#		self.layerDragStartLayer = len(self.model.layers)-1
	#		self.layerDragStartX = x
	#		self.layerDragStartY = y


	def layer_drag_end(self, x, y, button, modifiers):
		self.layerDragStartLayer = None
		self.layerDragStartX = None
		self.layerDragStartY = None
	
	def line_drag_end(self, x, y, button, modifiers):
		self.layerDragStartLayer = None
		self.layerDragStartX = None
		self.layerDragStartY = None

class MyWindow(pyglet.window.Window):

	# constructor
	def __init__(self, app, **kwargs):
		pyglet.window.Window.__init__(self, **kwargs)
		self.app = app
	
	# hud info
	def hud(self):
		
		# HUD labels
		self.blLabels = []
		self.brLabels = []
		self.tlLabels = []
		self.trLabels = []
		self.messageLabels = []
		self.lineLabel = None	
		self.layerLabel = None	
		self.fpsLabel = None	
		self.statusLabel = None
		self.helpText = None	

		# help
		if not self.app.config.getboolean('Display','hide_help'):
			self.blLabels.append(
				pyglet.text.Label(	"Press H for help",
									font_size=12) )

		# statistics
		## model stats
		if not self.app.config.getboolean('Display','hide_stats'):
			self.statsLabel = pyglet.text.Label("",
										font_size=12,
										anchor_x='left', anchor_y='top')
		
			self.statsLabel.text = "%d segments, %d layers."%(len(self.app.model.segments), self.app.model.topLayer)
			self.tlLabels.append(self.statsLabel)
		## fps counter
		if not self.app.config.getboolean('Display','hide_fps'):
			self.fpsLabel = pyglet.text.Label(	"0 fps",
										font_size=12,
										anchor_y='top')
			self.tlLabels.append(self.fpsLabel)

		## current Layer
		if not self.app.config.getboolean('Display','hide_layer'):
			self.layerLabel = pyglet.text.Label("Layer %d of %d - Lines %d to %d"%(self.app.layerIdx,self.app.model.topLayer, self.app.lineIdxMin,self.app.lineIdxMax),
										font_size=12,
										anchor_x='right', anchor_y='top')
			self.trLabels.append(self.layerLabel)
		if not self.app.config.getboolean('Display','hide_line'):
			self.lineLabel = pyglet.text.Label(	"Line %d"%self.app.lineIdx,
										font_size=12,
										anchor_x='right', anchor_y='bottom')
			self.brLabels.append(self.lineLabel)

		# layout the labels
		self.placeLabels(self.width, self.height)
	
	
	# events
	def on_resize(self, width, height):
		glViewport(0, 0, width, height)
		self.hud()
		self.placeLabels(width, height)
		self.app.aspect = float(width) / height
		#self.render(width, height)
		
		return pyglet.event.EVENT_HANDLED

	def on_mouse_press(self, x, y, button, modifiers):
		#print "on_mouse_press(x=%d, y=%d, button=%s, modifiers=%s)"%(x, y, button, modifiers)
		if button & mouse.LEFT:
			self.app.rotate_drag_start(x, y, button, modifiers)
			
		if button & mouse.MIDDLE:
			self.app.layer_drag_start(x, y, button, modifiers)

		if button & mouse.RIGHT:
			self.app.line_drag_start(x, y, button, modifiers)


	def on_mouse_drag(self, x, y, dx, dy, buttons, modifiers):
		#print "on_mouse_drag(x=%d, y=%d, dx=%d, dy=%d, buttons=%s, modifiers=%s)"%(x, y, dx, dy, buttons, modifiers)
		if buttons & mouse.LEFT:
			self.app.rotate_drag_do(x, y, dx, dy, buttons, modifiers)
			
		if buttons & mouse.MIDDLE:
			self.app.layer_drag_do(x, y, dx, dy, buttons, modifiers)
		
		if buttons & mouse.RIGHT:
			self.app.line_drag_do(x, y, dx, dy, buttons, modifiers)


	def on_mouse_release(self, x, y, button, modifiers):
		#print "on_mouse_release(x=%d, y=%d, button=%s, modifiers=%s)"%(x, y, button, modifiers)
		if button & mouse.LEFT:
			self.app.rotate_drag_end(x, y, button, modifiers)
			
		if button & mouse.MIDDLE:
			self.app.layer_drag_end(x, y, button, modifiers)
		
		if button & mouse.RIGHT:
			self.app.line_drag_end(x, y, button, modifiers)

	def on_key_release(self, symbol, modifiers):
		if symbol==pyglet.window.key.H:
			self.app.clearMessages()
			self.helpText = None
		elif symbol==pyglet.window.key.ESCAPE:
			pyglet.app.exit()
	def on_key_press(self, symbol, modifiers):
		#print "pressed key: %s, mod: %s"%(symbol, modifiers)
		#print "pressed key: %s, mod: %s"%(pyglet.window.key.R, pyglet.window.key.MOD_CTRL)
		if symbol==pyglet.window.key.R:
			self.app.reload()
		elif symbol==pyglet.window.key.END:
			self.app.layerIdx = 1
			self.app.updateLayers()
		elif symbol==pyglet.window.key.HOME:
			self.app.layerIdx = self.app.model.topLayer
			self.app.updateLayers()
		elif symbol==pyglet.window.key.H:
			if not self.helpText:
				self.app.addMessage('Keyboard\n____________________\nR\t\tReload file\nHome\t\tTop Layer\nEnd\t\tBottom Layer\nUp\t\tNext Layer\nDown\t\tPrevious Layer\nRight\t\tNext Line\nLeft\t\tPrevious Line\nCtrl+Right\tForward 20 Lines\nCtrl+Left\tBack 20 Lines\n\n\nMouse\n____________________\nLeft-Button + Drag\tRotate View\nMiddle-Button + Drag\tChange Layer\nRight-Button + Drag\tChange Line\nScroll-Wheel\t\t\tZoom')
				self.helpText = True
	def on_text_motion(self,motion):
		if motion == pyglet.window.key.MOTION_UP:
			self.app.layerIdx += 1
			self.app.updateLayers()
		elif motion == pyglet.window.key.MOTION_DOWN:
			self.app.layerIdx -= 1
			self.app.updateLayers()
		elif motion == pyglet.window.key.MOTION_RIGHT:
			self.app.lineSegmentIdx += 1
			self.app.updateLayers()
		elif motion == pyglet.window.key.MOTION_LEFT:
			self.app.lineSegmentIdx -= 1
			self.app.updateLayers()
		elif motion == pyglet.window.key.MOTION_NEXT_WORD:
			self.app.lineSegmentIdx += 20
			self.app.updateLayers()
		elif motion == pyglet.window.key.MOTION_PREVIOUS_WORD:
			self.app.lineSegmentIdx -= 20
			self.app.updateLayers()
		
	def placeLabels(self, width, height):
		x = 5
		y = 5
		for label in self.blLabels:
			label.x = x
			label.y = y
			y += 20
			
		x = width - 5
		y = 5
		for label in self.brLabels:
			label.x = x
			label.y = y
			y += 20
			
		x = 5
		y = height - 5
		for label in self.tlLabels:
			label.x = x
			label.y = y
			y -= 20
			
		x = width - 5
		y = height - 5
		for label in self.trLabels:
			label.x = x
			label.y = y
			y -= 20
		x = width/2
		y = height/2
		for label in self.messageLabels:
			label.x = x
			label.y = y
			y -= 20


	def on_mouse_scroll(self, x, y, dx, dy):
		# zoom on mouse scroll
		delta = dx + dy
		z = 1.2 if delta>0 else 1/1.2
		self.app.zoom = max(1.0, self.app.zoom * z)

	def on_draw(self):
		#print "draw"
		
		# Clear buffers
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
		
		# setup projection
		glMatrixMode(GL_PROJECTION)
		#glShaderModel(GL_SMOOTH)
		glLoadIdentity()
		gluPerspective(65, self.width / float(self.height), 0.1, 1000)
		
		# setup camera
		glMatrixMode(GL_MODELVIEW)
		glLoadIdentity()
		gluLookAt(0,1.5,2,0,0,0,0,1,0)
		
		# enable alpha blending
		glEnable(GL_BLEND)
		glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
		
		# rotate axes to match reprap style
		glRotated(-90, 1,0,0)
		# user rotate model
		glRotated(-self.app.RX, 1,0,0)
		glRotated(self.app.RZ, 0,0,1)
		
		# Todo check this
		glTranslated(0,0,-0.5)
		
		# fit & user zoom model
		max_width = max(
			self.app.model.bbox.dx(),
			self.app.model.bbox.dy(),
			self.app.model.bbox.dz()
		)
		scale = self.app.zoom / max_width
		glScaled(scale, scale, scale)
		
		glTranslated(-self.app.model.bbox.cx(), -self.app.model.bbox.cy(), -self.app.model.bbox.cz())
		
		
		
		# draw axes
		glBegin(GL_LINES)
		glColor3f(1,0,0)
		glVertex3f(0,0,0); glVertex3f(1,0,0); glVertex3f(1,0,0); glVertex3f(1,0.1,0)
		glVertex3f(1,0,0); glVertex3f(self.app.model.bbox.xmax,0,0)
		glColor3f(0,1,0)
		glVertex3f(0,0,0); glVertex3f(0,1,0); glVertex3f(0,1,0); glVertex3f(0,1,0.1)
		glVertex3f(0,1,0); glVertex3f(0,self.app.model.bbox.ymax,0)
		glColor3f(0,0,1)
		glVertex3f(0,0,0); glVertex3f(0,0,1); glVertex3f(0,0,1); glVertex3f(0.1,0,1)
		glVertex3f(0,0,1); glVertex3f(0,0,self.app.model.bbox.zmax)
		glEnd()
		
		
		glLineWidth(self.app.lowerLineWidth)
		# Draw the model layers
		# lower layers
		for graphic in self.app.graphics_old[0:self.app.layerIdx]:
			graphic.draw(GL_LINES)
		
		glLineWidth(self.app.activeLineWidth)
		
		# highlighted layer
		graphic = self.app.graphics_current[self.app.layerIdx]
		graphic.draw(GL_LINES)

		# progressively highlight line segments
		if self.app.lineSegmentIdx:
 			if self.app.lineSegmentIdx != self.app.lineSegmentPreviousIdx:
				hlvertices = self.app.graphics_current[self.app.layerIdx].vertices[0:self.app.lineSegmentIdx * 6]
				self.app.graphics_segments = pyglet.graphics.vertex_list(len(hlvertices)/3,
						('v3f/static', hlvertices),
						('c4B/static', self.app.graphics_current[self.app.layerIdx].colors[0:self.app.lineSegmentIdx * 8])
					)
				self.app.lineSegmentPreviousIdx = self.app.lineSegmentIdx
			glLineWidth(self.app.segmentLineWidth)
			graphic = self.app.graphics_segments
			graphic.draw(GL_LINES)
		
		glLineWidth(self.app.limboLineWidth)
		# limbo layers
		for graphic in self.app.graphics_limbo[self.app.layerIdx+1:]:
			graphic.draw(GL_LINES)
		
		
		# disable depth for HUD
		glDisable(GL_DEPTH_TEST)
		glDepthMask(0)
		
		#Set your camera up for 2d, draw 2d scene
		
		glMatrixMode(GL_PROJECTION)
		glLoadIdentity();
		glOrtho(0, self.width, 0, self.height, -1, 1)
		glMatrixMode(GL_MODELVIEW)
		glLoadIdentity()
		
		if self.fpsLabel:
			self.fpsLabel.text = "%d fps"%int(round(pyglet.clock.get_fps()))
		
		for label in self.blLabels:
			label.draw()
		for label in self.brLabels:
			label.draw()
		for label in self.tlLabels:
			label.draw()
		for label in self.trLabels:
			label.draw()
	
		this_x = self.width/2
		this_y = self.height/2
		for label in self.messageLabels:
			label.x = this_x
			label.y = this_y
			label.draw()
			this_y -= 20
		
		# reenable depth for next model display
		glEnable(GL_DEPTH_TEST)
		glDepthMask(1)

App().main()
