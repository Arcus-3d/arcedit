#!/usr/bin/env python

YAGV_VERSION = "0.2"

import pyglet

# Disable error checking for increased performance
pyglet.options['debug_gl'] = False


from pyglet import clock
from pyglet.gl import *
from pyglet.window import key
from pyglet.window import mouse

from gcodeParser import *
import os.path


class App:
	def __init__(self):
		self.RX = 0.0
		self.RZ = 0.0
		self.zoom = 1.0
	
	def run(self, path):
		print
		print "Parsing '%s'..."%path
		print

		self.parser = GcodeParser()
		self.model = self.parser.parseFile(path)

		print
		print "Done! %s"%self.model
		print

		self.layerIdx = 0
		
		return self
		
	def render(self):
		
		self.graphics = []
		#TODO use batch = pyglet.graphics.Batch() for even more performance!
		
		for layer in self.model.layers:
			
			#vertex_list = pyglet.graphics.vertex_list(2,
			#	('v3f', (10, 15, 30, 35)),
			#	('c3B', (0, 0, 255, 0, 255, 0))
			#)
			vertices = []
			#colors = []
			
			x = layer.start["X"]
			y = layer.start["Y"]
			z = layer.start["Z"]
			for seg in layer.segments:
				vertices.append(x)
				vertices.append(y)
				vertices.append(z)
				x = seg.coords["X"]
				y = seg.coords["Y"]
				z = seg.coords["Z"]
				vertices.append(x)
				vertices.append(y)
				vertices.append(z)

			vertex_list = pyglet.graphics.vertex_list(len(vertices)/3,
				('v3f/static', vertices)
				#('c3B', (0, 0, 255, 0, 255, 0))
			)
			
			self.graphics.append(vertex_list)

class MyWindow(pyglet.window.Window):

	# events

	def on_resize(self, width, height):
		glViewport(0, 0, width, height)
		self.placeLabels(width, height)
		#app.render(width, height)
		
		return pyglet.event.EVENT_HANDLED

	def on_mouse_press(self, x, y, button, modifiers):
		#print "on_mouse_press(x=%d, y=%d, button=%s, modifiers=%s)"%(x, y, button, modifiers)
		if button & mouse.LEFT:
			rotate_drag_start(x, y, button, modifiers)
			
		if button & mouse.RIGHT:
			layer_drag_start(x, y, button, modifiers)


	def on_mouse_drag(self, x, y, dx, dy, buttons, modifiers):
		#print "on_mouse_drag(x=%d, y=%d, dx=%d, dy=%d, buttons=%s, modifiers=%s)"%(x, y, dx, dy, buttons, modifiers)
		if buttons & mouse.LEFT:
			rotate_drag_do(x, y, dx, dy, buttons, modifiers)
			
		if buttons & mouse.RIGHT:
			layer_drag_do(x, y, dx, dy, buttons, modifiers)


	def on_mouse_release(self, x, y, button, modifiers):
		#print "on_mouse_release(x=%d, y=%d, button=%s, modifiers=%s)"%(x, y, button, modifiers)
		if button & mouse.LEFT:
			rotate_drag_end(x, y, button, modifiers)
			
		if button & mouse.RIGHT:
			layer_drag_end(x, y, button, modifiers)


	def placeLabels(self, width, height):
		x = 5
		y = 5
		for label in blLabels:
			label.x = x
			label.y = y
			y += 20
			
		x = width - 5
		y = 5
		for label in brLabels:
			label.x = x
			label.y = y
			y += 20
			
		x = 5
		y = height - 5
		for label in tlLabels:
			label.x = x
			label.y = y
			y -= 20
			
		x = width - 5
		y = height - 5
		for label in trLabels:
			label.x = x
			label.y = y
			y -= 20


	def on_mouse_scroll(self, x, y, dx, dy):
		# zoom on mouse scroll
		delta = dx + dy
		z = 1.2 if delta>0 else 1/1.2
		app.zoom = max(1.0, app.zoom * z)

	def on_draw(self):
		# Clear buffers
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
		
		# setup projection
		glMatrixMode(GL_PROJECTION)
		glLoadIdentity()
		gluPerspective(65, window.width / float(window.height), 0.1, 1000)
		
		# setup camera
		glMatrixMode(GL_MODELVIEW)
		glLoadIdentity()
		gluLookAt(0,1.5,2,0,0,0,0,1,0)
		
		# enable alpha blending
		glEnable(GL_BLEND)
		glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
		
		# rotate axes to match reprap style
		glRotated(-90, 1,0,0)
		# user rotate model
		glRotated(-app.RX, 1,0,0)
		glRotated(app.RZ, 0,0,1)
		
		glTranslated(0,0,-0.5)
		
		# draw axes
		glBegin(GL_LINES)
		glColor3f(1,0,0)
		glVertex2i(0,0); glVertex2i(1,0)
		glColor3f(0,1,0)
		glVertex2i(0,0); glVertex2i(0,1)
		glColor3f(0,0,1)
		glVertex2i(0,0); glVertex3i(0,0,1)
		glEnd()
		
		# fit & user zoom model
		scale = app.zoom / max(app.model.extents[0], app.model.extents[2], app.model.extents[5])
		glScaled(scale, scale, scale)
		
		# Draw the model
		
		# lower layers
		glColor4f(0.5,0.5,0.5,0.5)
		for graphic in app.graphics[0:app.layerIdx]:
			graphic.draw(GL_LINES)
			
		# highlighted layer
		glColor4f(1,1,1,1)
		graphic = app.graphics[app.layerIdx]
		graphic.draw(GL_LINES)
		
		# limbo layers
		glColor4f(0.5,0.5,0.5,0.1)
		for graphic in app.graphics[app.layerIdx+1:]:
			graphic.draw(GL_LINES)
		
		glDisable(GL_DEPTH_TEST)
		glDepthMask(0)
		
		#Set your camera up for 2d, draw 2d scene
		
		glMatrixMode(GL_PROJECTION)
		glLoadIdentity();
		glOrtho(0, window.width, 0, window.height, -1, 1)
		glMatrixMode(GL_MODELVIEW)
		glLoadIdentity()
		
		#statsLabel.text = "%2.2ffps"%pyglet.clock.get_fps()
		fpsLabel.text = "%d fps"%int(round(pyglet.clock.get_fps()))
		
		for label in blLabels:
			label.draw()
		for label in brLabels:
			label.draw()
		for label in tlLabels:
			label.draw()
		for label in trLabels:
			label.draw()

		glEnable(GL_DEPTH_TEST)
		glDepthMask(1)

def rotate_drag_start(x, y, button, modifiers):
	app.rotateDragStartRX = app.RX
	app.rotateDragStartRZ = app.RZ
	app.rotateDragStartX = x
	app.rotateDragStartY = y


def rotate_drag_do(x, y, dx, dy, buttons, modifiers):
	# deltas
	deltaX = x - app.rotateDragStartX
	deltaY = y - app.rotateDragStartY
	# rotate!
	app.RZ = app.rotateDragStartRZ + deltaX/5.0 # mouse X bound to model Z
	app.RX = app.rotateDragStartRX + deltaY/5.0 # mouse Y bound to model X


def rotate_drag_end(x, y, button, modifiers):
	app.rotateDragStartRX = None
	app.rotateDragStartRZ = None
	app.rotateDragStartX = None
	app.rotateDragStartY = None


def layer_drag_start(x, y, button, modifiers):
	app.layerDragStartLayer = app.layerIdx
	app.layerDragStartX = x
	app.layerDragStartY = y


def layer_drag_do(x, y, dx, dy, buttons, modifiers):
	# sum x & y
	delta = x - app.layerDragStartX + y - app.layerDragStartY
	# new theoretical layer
	app.layerIdx = int(app.layerDragStartLayer + delta/5)
	# clamp layer to 0-max
	app.layerIdx = max(min(app.layerIdx, app.model.topLayer), 0)
	
	layerLabel.text = "layer %d"%app.layerIdx
	
#	# clamp layer to 0-max, with origin slip
#	if (app.layerIdx < 0):
#		app.layerIdx = 0
#		app.layerDragStartLayer = 0
#		app.layerDragStartX = x
#		app.layerDragStartY = y
#	if (app.layerIdx > len(app.model.layers)-1):
#		app.layerIdx = len(app.model.layers)-1
#		app.layerDragStartLayer = len(app.model.layers)-1
#		app.layerDragStartX = x
#		app.layerDragStartY = y


def layer_drag_end(x, y, button, modifiers):
	app.layerDragStartLayer = None
	app.layerDragStartX = None
	app.layerDragStartY = None



#### MAIN CODE ####
print "Yet Another GCode Viewer v%s"%YAGV_VERSION

path = "test.gcode"

import sys 
if len(sys.argv) > 1:
	path = sys.argv[1]

app = App().run(path)


window = MyWindow(None, None, "Yet Another GCode Viewer v%s"%YAGV_VERSION, True)

# debug: log all events
# window.push_handlers(pyglet.window.event.WindowEventLogger())

# HUD labels
blLabels = []
brLabels = []
tlLabels = []
trLabels = []

# help
helpText = [	"Right-click & drag (any direction) to change layer",
				"Scroll to zoom",
				"Left-click & drag to rotate view"]
for txt in helpText:
	blLabels.append(
		pyglet.text.Label(	txt,
							font_size=12) )

# statistics
# model stats
statsLabel = pyglet.text.Label(	"",
								font_size=12,
								anchor_y='top')
filename = os.path.basename(path)
statsLabel.text = "%s: %d segments, %d layers."%(filename, len(app.model.segments), len(app.model.layers))

# fps counter
fpsLabel = pyglet.text.Label(	"",
								font_size=12,
								anchor_y='top')
tlLabels.append(statsLabel)
tlLabels.append(fpsLabel)

# status
# current Layer
layerLabel = pyglet.text.Label(	"layer %d"%app.layerIdx,
								font_size=12,
								anchor_x='right', anchor_y='top')
trLabels.append(layerLabel)

# layout the labels in the window's corners
window.placeLabels(window.width, window.height)

# render the model
app.render()

pyglet.app.run()
